const std = @import("std");
const mem = @import("../mem.zig");

const Table = @import("Table.zig");
const Slice = Table.Slice;

const Self = @This();

pub fn init(section: []const u8, str_table: Table) Self {
    const int_width = @sizeOf(i16);

    var capabilities: Self = undefined;

    const fields = @typeInfo(Self).Struct.fields;

    var byte_i: usize = 0;
    inline for (fields) |field| {
        if (byte_i >= section.len) {
            break;
        }
        const bytes = section[byte_i .. byte_i + int_width];
        const str_i = mem.getInt(i16, bytes);

        if (str_i == -1) {
            // value of -1 means capability isn't supported
            @field(capabilities, field.name) = null;
        } else {
            std.debug.assert(str_i >= 0);
            const slice = str_table.getSliceFromByteOffset(@as(usize, @bitCast(u16, str_i)));
            if (slice == null) {
                std.log.warn("invalid terminfo: byte offset = {d}", .{str_i});
            }
            @field(capabilities, field.name) = slice;
        }

        byte_i += int_width;
    }

    return capabilities;
}

// field enum for comptime
pub fn Field() type {
    const Type = std.builtin.Type;

    const type_info = @typeInfo(Self); // Self == Capabilities, not Field()
    const struct_fields = type_info.Struct.fields;

    var enum_fields: [struct_fields.len]Type.EnumField = undefined;
    inline for (struct_fields, &enum_fields, 0..) |struct_field, *enum_field, i| {
        enum_field.* = Type.EnumField{
            .name = struct_field.name,
            .value = i,
        };
    }

    return @Type(.{ .Enum = .{
        .tag_type = u16,
        .fields = &enum_fields,
        .decls = &[_]Type.Declaration{},
        .is_exhaustive = true,
    } });
}

// fields

back_tab: ?Slice,
bell: ?Slice,
carriage_return: ?Slice,
change_scroll_region: ?Slice,
clear_all_tabs: ?Slice,
clear_screen: ?Slice,
clr_eol: ?Slice,
clr_eos: ?Slice,
column_address: ?Slice,
command_character: ?Slice,
cursor_address: ?Slice,
cursor_down: ?Slice,
cursor_home: ?Slice,
cursor_invisible: ?Slice,
cursor_left: ?Slice,
cursor_mem_address: ?Slice,
cursor_normal: ?Slice,
cursor_right: ?Slice,
cursor_to_ll: ?Slice,
cursor_up: ?Slice,
cursor_visible: ?Slice,
delete_character: ?Slice,
delete_line: ?Slice,
dis_status_line: ?Slice,
down_half_line: ?Slice,
enter_alt_charset_mode: ?Slice,
enter_blink_mode: ?Slice,
enter_bold_mode: ?Slice,
enter_ca_mode: ?Slice,
enter_delete_mode: ?Slice,
enter_dim_mode: ?Slice,
enter_insert_mode: ?Slice,
enter_secure_mode: ?Slice,
enter_protected_mode: ?Slice,
enter_reverse_mode: ?Slice,
enter_standout_mode: ?Slice,
enter_underline_mode: ?Slice,
erase_chars: ?Slice,
exit_alt_charset_mode: ?Slice,
exit_attribute_mode: ?Slice,
exit_ca_mode: ?Slice,
exit_delete_mode: ?Slice,
exit_insert_mode: ?Slice,
exit_standout_mode: ?Slice,
exit_underline_mode: ?Slice,
flash_screen: ?Slice,
form_feed: ?Slice,
from_status_line: ?Slice,
init_1string: ?Slice,
init_2string: ?Slice,
init_3string: ?Slice,
init_file: ?Slice,
insert_character: ?Slice,
insert_line: ?Slice,
insert_padding: ?Slice,
key_backspace: ?Slice,
key_catab: ?Slice,
key_clear: ?Slice,
key_ctab: ?Slice,
key_dc: ?Slice,
key_dl: ?Slice,
key_down: ?Slice,
key_eic: ?Slice,
key_eol: ?Slice,
key_eos: ?Slice,
key_f0: ?Slice,
key_f1: ?Slice,
key_f10: ?Slice,
key_f2: ?Slice,
key_f3: ?Slice,
key_f4: ?Slice,
key_f5: ?Slice,
key_f6: ?Slice,
key_f7: ?Slice,
key_f8: ?Slice,
key_f9: ?Slice,
key_home: ?Slice,
key_ic: ?Slice,
key_il: ?Slice,
key_left: ?Slice,
key_ll: ?Slice,
key_npage: ?Slice,
key_ppage: ?Slice,
key_right: ?Slice,
key_sf: ?Slice,
key_sr: ?Slice,
key_stab: ?Slice,
key_up: ?Slice,
keypad_local: ?Slice,
keypad_xmit: ?Slice,
lab_f0: ?Slice,
lab_f1: ?Slice,
lab_f10: ?Slice,
lab_f2: ?Slice,
lab_f3: ?Slice,
lab_f4: ?Slice,
lab_f5: ?Slice,
lab_f6: ?Slice,
lab_f7: ?Slice,
lab_f8: ?Slice,
lab_f9: ?Slice,
meta_off: ?Slice,
meta_on: ?Slice,
newline: ?Slice,
pad_char: ?Slice,
parm_dch: ?Slice,
parm_delete_line: ?Slice,
parm_down_cursor: ?Slice,
parm_ich: ?Slice,
parm_index: ?Slice,
parm_insert_line: ?Slice,
parm_left_cursor: ?Slice,
parm_right_cursor: ?Slice,
parm_rindex: ?Slice,
parm_up_cursor: ?Slice,
pkey_key: ?Slice,
pkey_local: ?Slice,
pkey_xmit: ?Slice,
print_screen: ?Slice,
prtr_off: ?Slice,
prtr_on: ?Slice,
repeat_char: ?Slice,
reset_1string: ?Slice,
reset_2string: ?Slice,
reset_3string: ?Slice,
reset_file: ?Slice,
restore_cursor: ?Slice,
row_address: ?Slice,
save_cursor: ?Slice,
scroll_forward: ?Slice,
scroll_reverse: ?Slice,
set_attributes: ?Slice,
set_tab: ?Slice,
set_window: ?Slice,
tab: ?Slice,
to_status_line: ?Slice,
underline_char: ?Slice,
up_half_line: ?Slice,
init_prog: ?Slice,
key_a1: ?Slice,
key_a3: ?Slice,
key_b2: ?Slice,
key_c1: ?Slice,
key_c3: ?Slice,
prtr_non: ?Slice,
char_padding: ?Slice,
acs_chars: ?Slice,
plab_norm: ?Slice,
key_btab: ?Slice,
enter_xon_mode: ?Slice,
exit_xon_mode: ?Slice,
enter_am_mode: ?Slice,
exit_am_mode: ?Slice,
xon_character: ?Slice,
xoff_character: ?Slice,
ena_acs: ?Slice,
label_on: ?Slice,
label_off: ?Slice,
key_beg: ?Slice,
key_cancel: ?Slice,
key_close: ?Slice,
key_command: ?Slice,
key_copy: ?Slice,
key_create: ?Slice,
key_end: ?Slice,
key_enter: ?Slice,
key_exit: ?Slice,
key_find: ?Slice,
key_help: ?Slice,
key_mark: ?Slice,
key_message: ?Slice,
key_move: ?Slice,
key_next: ?Slice,
key_open: ?Slice,
key_options: ?Slice,
key_previous: ?Slice,
key_print: ?Slice,
key_redo: ?Slice,
key_reference: ?Slice,
key_refresh: ?Slice,
key_replace: ?Slice,
key_restart: ?Slice,
key_resume: ?Slice,
key_save: ?Slice,
key_suspend: ?Slice,
key_undo: ?Slice,
key_sbeg: ?Slice,
key_scancel: ?Slice,
key_scommand: ?Slice,
key_scopy: ?Slice,
key_screate: ?Slice,
key_sdc: ?Slice,
key_sdl: ?Slice,
key_select: ?Slice,
key_send: ?Slice,
key_seol: ?Slice,
key_sexit: ?Slice,
key_sfind: ?Slice,
key_shelp: ?Slice,
key_shome: ?Slice,
key_sic: ?Slice,
key_sleft: ?Slice,
key_smessage: ?Slice,
key_smove: ?Slice,
key_snext: ?Slice,
key_soptions: ?Slice,
key_sprevious: ?Slice,
key_sprint: ?Slice,
key_sredo: ?Slice,
key_sreplace: ?Slice,
key_sright: ?Slice,
key_srsume: ?Slice,
key_ssave: ?Slice,
key_ssuspend: ?Slice,
key_sundo: ?Slice,
req_for_input: ?Slice,
key_f11: ?Slice,
key_f12: ?Slice,
key_f13: ?Slice,
key_f14: ?Slice,
key_f15: ?Slice,
key_f16: ?Slice,
key_f17: ?Slice,
key_f18: ?Slice,
key_f19: ?Slice,
key_f20: ?Slice,
key_f21: ?Slice,
key_f22: ?Slice,
key_f23: ?Slice,
key_f24: ?Slice,
key_f25: ?Slice,
key_f26: ?Slice,
key_f27: ?Slice,
key_f28: ?Slice,
key_f29: ?Slice,
key_f30: ?Slice,
key_f31: ?Slice,
key_f32: ?Slice,
key_f33: ?Slice,
key_f34: ?Slice,
key_f35: ?Slice,
key_f36: ?Slice,
key_f37: ?Slice,
key_f38: ?Slice,
key_f39: ?Slice,
key_f40: ?Slice,
key_f41: ?Slice,
key_f42: ?Slice,
key_f43: ?Slice,
key_f44: ?Slice,
key_f45: ?Slice,
key_f46: ?Slice,
key_f47: ?Slice,
key_f48: ?Slice,
key_f49: ?Slice,
key_f50: ?Slice,
key_f51: ?Slice,
key_f52: ?Slice,
key_f53: ?Slice,
key_f54: ?Slice,
key_f55: ?Slice,
key_f56: ?Slice,
key_f57: ?Slice,
key_f58: ?Slice,
key_f59: ?Slice,
key_f60: ?Slice,
key_f61: ?Slice,
key_f62: ?Slice,
key_f63: ?Slice,
clr_bol: ?Slice,
clear_margins: ?Slice,
set_left_margin: ?Slice,
set_right_margin: ?Slice,
label_format: ?Slice,
set_clock: ?Slice,
display_clock: ?Slice,
remove_clock: ?Slice,
create_window: ?Slice,
goto_window: ?Slice,
hangup: ?Slice,
dial_phone: ?Slice,
quick_dial: ?Slice,
tone: ?Slice,
pulse: ?Slice,
flash_hook: ?Slice,
fixed_pause: ?Slice,
wait_tone: ?Slice,
user0: ?Slice,
user1: ?Slice,
user2: ?Slice,
user3: ?Slice,
user4: ?Slice,
user5: ?Slice,
user6: ?Slice,
user7: ?Slice,
user8: ?Slice,
user9: ?Slice,
orig_pair: ?Slice,
orig_colors: ?Slice,
initialize_color: ?Slice,
initialize_pair: ?Slice,
set_color_pair: ?Slice,
set_foreground: ?Slice,
set_background: ?Slice,
change_char_pitch: ?Slice,
change_line_pitch: ?Slice,
change_res_horz: ?Slice,
change_res_vert: ?Slice,
define_char: ?Slice,
enter_doublewide_mode: ?Slice,
enter_draft_quality: ?Slice,
enter_italics_mode: ?Slice,
enter_leftward_mode: ?Slice,
enter_micro_mode: ?Slice,
enter_near_letter_quality: ?Slice,
enter_normal_quality: ?Slice,
enter_shadow_mode: ?Slice,
enter_subscript_mode: ?Slice,
enter_superscript_mode: ?Slice,
enter_upward_mode: ?Slice,
exit_doublewide_mode: ?Slice,
exit_italics_mode: ?Slice,
exit_leftward_mode: ?Slice,
exit_micro_mode: ?Slice,
exit_shadow_mode: ?Slice,
exit_subscript_mode: ?Slice,
exit_superscript_mode: ?Slice,
exit_upward_mode: ?Slice,
micro_column_address: ?Slice,
micro_down: ?Slice,
micro_left: ?Slice,
micro_right: ?Slice,
micro_row_address: ?Slice,
micro_up: ?Slice,
order_of_pins: ?Slice,
parm_down_micro: ?Slice,
parm_left_micro: ?Slice,
parm_right_micro: ?Slice,
parm_up_micro: ?Slice,
select_char_set: ?Slice,
set_bottom_margin: ?Slice,
set_bottom_margin_parm: ?Slice,
set_left_margin_parm: ?Slice,
set_right_margin_parm: ?Slice,
set_top_margin: ?Slice,
set_top_margin_parm: ?Slice,
start_bit_image: ?Slice,
start_char_set_def: ?Slice,
stop_bit_image: ?Slice,
stop_char_set_def: ?Slice,
subscript_characters: ?Slice,
superscript_characters: ?Slice,
these_cause_cr: ?Slice,
zero_motion: ?Slice,
char_set_names: ?Slice,
key_mouse: ?Slice,
mouse_info: ?Slice,
req_mouse_pos: ?Slice,
get_mouse: ?Slice,
set_a_foreground: ?Slice,
set_a_background: ?Slice,
pkey_plab: ?Slice,
device_type: ?Slice,
code_set_init: ?Slice,
set0_des_seq: ?Slice,
set1_des_seq: ?Slice,
set2_des_seq: ?Slice,
set3_des_seq: ?Slice,
set_lr_margin: ?Slice,
set_tb_margin: ?Slice,
bit_image_repeat: ?Slice,
bit_image_newline: ?Slice,
bit_image_carriage_return: ?Slice,
color_names: ?Slice,
define_bit_image_region: ?Slice,
end_bit_image_region: ?Slice,
set_color_band: ?Slice,
set_page_length: ?Slice,
display_pc_char: ?Slice,
enter_pc_charset_mode: ?Slice,
exit_pc_charset_mode: ?Slice,
enter_scancode_mode: ?Slice,
exit_scancode_mode: ?Slice,
pc_term_options: ?Slice,
scancode_escape: ?Slice,
alt_scancode_esc: ?Slice,
enter_horizontal_hl_mode: ?Slice,
enter_left_hl_mode: ?Slice,
enter_low_hl_mode: ?Slice,
enter_right_hl_mode: ?Slice,
enter_top_hl_mode: ?Slice,
enter_vertical_hl_mode: ?Slice,
set_a_attributes: ?Slice,
set_pglen_inch: ?Slice,
