const std = @import("std");
const mem = @import("../mem.zig");

const Table = @import("Table.zig");

const Self = @This();

pub fn init(section: []const u8, str_table: Table) Self {
    const int_width = @sizeOf(i16);

    var capabilities: Self = undefined;

    const fields = @typeInfo(Self).Struct.fields;

    var byte_i: usize = 0;
    inline for (fields) |field| {
        if (byte_i >= section.len) {
            break;
        }
        const bytes = section[byte_i .. byte_i + int_width];
        const str_i = mem.getInt(i16, bytes);

        if (str_i == -1) {
            // value of -1 means capability isn't supported
            @field(capabilities, field.name) = null;
        } else {
            std.debug.assert(str_i >= 0);
            const slice = str_table.getSliceFromByteOffset(@as(usize, @bitCast(u16, str_i)));
            if (slice == null) {
                std.log.warn("invalid terminfo: byte offset = {d}", .{str_i});
            }
            @field(capabilities, field.name) = slice;
        }

        byte_i += int_width;
    }

    return capabilities;
}

// field enum for comptime
pub fn Field() type {
    const Type = std.builtin.Type;

    const type_info = @typeInfo(Self); // Self == Capabilities, not Field()
    const struct_fields = type_info.Struct.fields;

    var enum_fields: [struct_fields.len]Type.EnumField = undefined;
    inline for (struct_fields, &enum_fields, 0..) |struct_field, *enum_field, i| {
        enum_field.* = Type.EnumField{
            .name = struct_field.name,
            .value = i,
        };
    }

    return @Type(.{ .Enum = .{
        .tag_type = u16,
        .fields = &enum_fields,
        .decls = &[_]Type.Declaration{},
        .is_exhaustive = true,
    } });
}

// fields

back_tab: ?[]const u8,
bell: ?[]const u8,
carriage_return: ?[]const u8,
change_scroll_region: ?[]const u8,
clear_all_tabs: ?[]const u8,
clear_screen: ?[]const u8,
clr_eol: ?[]const u8,
clr_eos: ?[]const u8,
column_address: ?[]const u8,
command_character: ?[]const u8,
cursor_address: ?[]const u8,
cursor_down: ?[]const u8,
cursor_home: ?[]const u8,
cursor_invisible: ?[]const u8,
cursor_left: ?[]const u8,
cursor_mem_address: ?[]const u8,
cursor_normal: ?[]const u8,
cursor_right: ?[]const u8,
cursor_to_ll: ?[]const u8,
cursor_up: ?[]const u8,
cursor_visible: ?[]const u8,
delete_character: ?[]const u8,
delete_line: ?[]const u8,
dis_status_line: ?[]const u8,
down_half_line: ?[]const u8,
enter_alt_charset_mode: ?[]const u8,
enter_blink_mode: ?[]const u8,
enter_bold_mode: ?[]const u8,
enter_ca_mode: ?[]const u8,
enter_delete_mode: ?[]const u8,
enter_dim_mode: ?[]const u8,
enter_insert_mode: ?[]const u8,
enter_secure_mode: ?[]const u8,
enter_protected_mode: ?[]const u8,
enter_reverse_mode: ?[]const u8,
enter_standout_mode: ?[]const u8,
enter_underline_mode: ?[]const u8,
erase_chars: ?[]const u8,
exit_alt_charset_mode: ?[]const u8,
exit_attribute_mode: ?[]const u8,
exit_ca_mode: ?[]const u8,
exit_delete_mode: ?[]const u8,
exit_insert_mode: ?[]const u8,
exit_standout_mode: ?[]const u8,
exit_underline_mode: ?[]const u8,
flash_screen: ?[]const u8,
form_feed: ?[]const u8,
from_status_line: ?[]const u8,
init_1string: ?[]const u8,
init_2string: ?[]const u8,
init_3string: ?[]const u8,
init_file: ?[]const u8,
insert_character: ?[]const u8,
insert_line: ?[]const u8,
insert_padding: ?[]const u8,
key_backspace: ?[]const u8,
key_catab: ?[]const u8,
key_clear: ?[]const u8,
key_ctab: ?[]const u8,
key_dc: ?[]const u8,
key_dl: ?[]const u8,
key_down: ?[]const u8,
key_eic: ?[]const u8,
key_eol: ?[]const u8,
key_eos: ?[]const u8,
key_f0: ?[]const u8,
key_f1: ?[]const u8,
key_f10: ?[]const u8,
key_f2: ?[]const u8,
key_f3: ?[]const u8,
key_f4: ?[]const u8,
key_f5: ?[]const u8,
key_f6: ?[]const u8,
key_f7: ?[]const u8,
key_f8: ?[]const u8,
key_f9: ?[]const u8,
key_home: ?[]const u8,
key_ic: ?[]const u8,
key_il: ?[]const u8,
key_left: ?[]const u8,
key_ll: ?[]const u8,
key_npage: ?[]const u8,
key_ppage: ?[]const u8,
key_right: ?[]const u8,
key_sf: ?[]const u8,
key_sr: ?[]const u8,
key_stab: ?[]const u8,
key_up: ?[]const u8,
keypad_local: ?[]const u8,
keypad_xmit: ?[]const u8,
lab_f0: ?[]const u8,
lab_f1: ?[]const u8,
lab_f10: ?[]const u8,
lab_f2: ?[]const u8,
lab_f3: ?[]const u8,
lab_f4: ?[]const u8,
lab_f5: ?[]const u8,
lab_f6: ?[]const u8,
lab_f7: ?[]const u8,
lab_f8: ?[]const u8,
lab_f9: ?[]const u8,
meta_off: ?[]const u8,
meta_on: ?[]const u8,
newline: ?[]const u8,
pad_char: ?[]const u8,
parm_dch: ?[]const u8,
parm_delete_line: ?[]const u8,
parm_down_cursor: ?[]const u8,
parm_ich: ?[]const u8,
parm_index: ?[]const u8,
parm_insert_line: ?[]const u8,
parm_left_cursor: ?[]const u8,
parm_right_cursor: ?[]const u8,
parm_rindex: ?[]const u8,
parm_up_cursor: ?[]const u8,
pkey_key: ?[]const u8,
pkey_local: ?[]const u8,
pkey_xmit: ?[]const u8,
print_screen: ?[]const u8,
prtr_off: ?[]const u8,
prtr_on: ?[]const u8,
repeat_char: ?[]const u8,
reset_1string: ?[]const u8,
reset_2string: ?[]const u8,
reset_3string: ?[]const u8,
reset_file: ?[]const u8,
restore_cursor: ?[]const u8,
row_address: ?[]const u8,
save_cursor: ?[]const u8,
scroll_forward: ?[]const u8,
scroll_reverse: ?[]const u8,
set_attributes: ?[]const u8,
set_tab: ?[]const u8,
set_window: ?[]const u8,
tab: ?[]const u8,
to_status_line: ?[]const u8,
underline_char: ?[]const u8,
up_half_line: ?[]const u8,
init_prog: ?[]const u8,
key_a1: ?[]const u8,
key_a3: ?[]const u8,
key_b2: ?[]const u8,
key_c1: ?[]const u8,
key_c3: ?[]const u8,
prtr_non: ?[]const u8,
char_padding: ?[]const u8,
acs_chars: ?[]const u8,
plab_norm: ?[]const u8,
key_btab: ?[]const u8,
enter_xon_mode: ?[]const u8,
exit_xon_mode: ?[]const u8,
enter_am_mode: ?[]const u8,
exit_am_mode: ?[]const u8,
xon_character: ?[]const u8,
xoff_character: ?[]const u8,
ena_acs: ?[]const u8,
label_on: ?[]const u8,
label_off: ?[]const u8,
key_beg: ?[]const u8,
key_cancel: ?[]const u8,
key_close: ?[]const u8,
key_command: ?[]const u8,
key_copy: ?[]const u8,
key_create: ?[]const u8,
key_end: ?[]const u8,
key_enter: ?[]const u8,
key_exit: ?[]const u8,
key_find: ?[]const u8,
key_help: ?[]const u8,
key_mark: ?[]const u8,
key_message: ?[]const u8,
key_move: ?[]const u8,
key_next: ?[]const u8,
key_open: ?[]const u8,
key_options: ?[]const u8,
key_previous: ?[]const u8,
key_print: ?[]const u8,
key_redo: ?[]const u8,
key_reference: ?[]const u8,
key_refresh: ?[]const u8,
key_replace: ?[]const u8,
key_restart: ?[]const u8,
key_resume: ?[]const u8,
key_save: ?[]const u8,
key_suspend: ?[]const u8,
key_undo: ?[]const u8,
key_sbeg: ?[]const u8,
key_scancel: ?[]const u8,
key_scommand: ?[]const u8,
key_scopy: ?[]const u8,
key_screate: ?[]const u8,
key_sdc: ?[]const u8,
key_sdl: ?[]const u8,
key_select: ?[]const u8,
key_send: ?[]const u8,
key_seol: ?[]const u8,
key_sexit: ?[]const u8,
key_sfind: ?[]const u8,
key_shelp: ?[]const u8,
key_shome: ?[]const u8,
key_sic: ?[]const u8,
key_sleft: ?[]const u8,
key_smessage: ?[]const u8,
key_smove: ?[]const u8,
key_snext: ?[]const u8,
key_soptions: ?[]const u8,
key_sprevious: ?[]const u8,
key_sprint: ?[]const u8,
key_sredo: ?[]const u8,
key_sreplace: ?[]const u8,
key_sright: ?[]const u8,
key_srsume: ?[]const u8,
key_ssave: ?[]const u8,
key_ssuspend: ?[]const u8,
key_sundo: ?[]const u8,
req_for_input: ?[]const u8,
key_f11: ?[]const u8,
key_f12: ?[]const u8,
key_f13: ?[]const u8,
key_f14: ?[]const u8,
key_f15: ?[]const u8,
key_f16: ?[]const u8,
key_f17: ?[]const u8,
key_f18: ?[]const u8,
key_f19: ?[]const u8,
key_f20: ?[]const u8,
key_f21: ?[]const u8,
key_f22: ?[]const u8,
key_f23: ?[]const u8,
key_f24: ?[]const u8,
key_f25: ?[]const u8,
key_f26: ?[]const u8,
key_f27: ?[]const u8,
key_f28: ?[]const u8,
key_f29: ?[]const u8,
key_f30: ?[]const u8,
key_f31: ?[]const u8,
key_f32: ?[]const u8,
key_f33: ?[]const u8,
key_f34: ?[]const u8,
key_f35: ?[]const u8,
key_f36: ?[]const u8,
key_f37: ?[]const u8,
key_f38: ?[]const u8,
key_f39: ?[]const u8,
key_f40: ?[]const u8,
key_f41: ?[]const u8,
key_f42: ?[]const u8,
key_f43: ?[]const u8,
key_f44: ?[]const u8,
key_f45: ?[]const u8,
key_f46: ?[]const u8,
key_f47: ?[]const u8,
key_f48: ?[]const u8,
key_f49: ?[]const u8,
key_f50: ?[]const u8,
key_f51: ?[]const u8,
key_f52: ?[]const u8,
key_f53: ?[]const u8,
key_f54: ?[]const u8,
key_f55: ?[]const u8,
key_f56: ?[]const u8,
key_f57: ?[]const u8,
key_f58: ?[]const u8,
key_f59: ?[]const u8,
key_f60: ?[]const u8,
key_f61: ?[]const u8,
key_f62: ?[]const u8,
key_f63: ?[]const u8,
clr_bol: ?[]const u8,
clear_margins: ?[]const u8,
set_left_margin: ?[]const u8,
set_right_margin: ?[]const u8,
label_format: ?[]const u8,
set_clock: ?[]const u8,
display_clock: ?[]const u8,
remove_clock: ?[]const u8,
create_window: ?[]const u8,
goto_window: ?[]const u8,
hangup: ?[]const u8,
dial_phone: ?[]const u8,
quick_dial: ?[]const u8,
tone: ?[]const u8,
pulse: ?[]const u8,
flash_hook: ?[]const u8,
fixed_pause: ?[]const u8,
wait_tone: ?[]const u8,
user0: ?[]const u8,
user1: ?[]const u8,
user2: ?[]const u8,
user3: ?[]const u8,
user4: ?[]const u8,
user5: ?[]const u8,
user6: ?[]const u8,
user7: ?[]const u8,
user8: ?[]const u8,
user9: ?[]const u8,
orig_pair: ?[]const u8,
orig_colors: ?[]const u8,
initialize_color: ?[]const u8,
initialize_pair: ?[]const u8,
set_color_pair: ?[]const u8,
set_foreground: ?[]const u8,
set_background: ?[]const u8,
change_char_pitch: ?[]const u8,
change_line_pitch: ?[]const u8,
change_res_horz: ?[]const u8,
change_res_vert: ?[]const u8,
define_char: ?[]const u8,
enter_doublewide_mode: ?[]const u8,
enter_draft_quality: ?[]const u8,
enter_italics_mode: ?[]const u8,
enter_leftward_mode: ?[]const u8,
enter_micro_mode: ?[]const u8,
enter_near_letter_quality: ?[]const u8,
enter_normal_quality: ?[]const u8,
enter_shadow_mode: ?[]const u8,
enter_subscript_mode: ?[]const u8,
enter_superscript_mode: ?[]const u8,
enter_upward_mode: ?[]const u8,
exit_doublewide_mode: ?[]const u8,
exit_italics_mode: ?[]const u8,
exit_leftward_mode: ?[]const u8,
exit_micro_mode: ?[]const u8,
exit_shadow_mode: ?[]const u8,
exit_subscript_mode: ?[]const u8,
exit_superscript_mode: ?[]const u8,
exit_upward_mode: ?[]const u8,
micro_column_address: ?[]const u8,
micro_down: ?[]const u8,
micro_left: ?[]const u8,
micro_right: ?[]const u8,
micro_row_address: ?[]const u8,
micro_up: ?[]const u8,
order_of_pins: ?[]const u8,
parm_down_micro: ?[]const u8,
parm_left_micro: ?[]const u8,
parm_right_micro: ?[]const u8,
parm_up_micro: ?[]const u8,
select_char_set: ?[]const u8,
set_bottom_margin: ?[]const u8,
set_bottom_margin_parm: ?[]const u8,
set_left_margin_parm: ?[]const u8,
set_right_margin_parm: ?[]const u8,
set_top_margin: ?[]const u8,
set_top_margin_parm: ?[]const u8,
start_bit_image: ?[]const u8,
start_char_set_def: ?[]const u8,
stop_bit_image: ?[]const u8,
stop_char_set_def: ?[]const u8,
subscript_characters: ?[]const u8,
superscript_characters: ?[]const u8,
these_cause_cr: ?[]const u8,
zero_motion: ?[]const u8,
char_set_names: ?[]const u8,
key_mouse: ?[]const u8,
mouse_info: ?[]const u8,
req_mouse_pos: ?[]const u8,
get_mouse: ?[]const u8,
set_a_foreground: ?[]const u8,
set_a_background: ?[]const u8,
pkey_plab: ?[]const u8,
device_type: ?[]const u8,
code_set_init: ?[]const u8,
set0_des_seq: ?[]const u8,
set1_des_seq: ?[]const u8,
set2_des_seq: ?[]const u8,
set3_des_seq: ?[]const u8,
set_lr_margin: ?[]const u8,
set_tb_margin: ?[]const u8,
bit_image_repeat: ?[]const u8,
bit_image_newline: ?[]const u8,
bit_image_carriage_return: ?[]const u8,
color_names: ?[]const u8,
define_bit_image_region: ?[]const u8,
end_bit_image_region: ?[]const u8,
set_color_band: ?[]const u8,
set_page_length: ?[]const u8,
display_pc_char: ?[]const u8,
enter_pc_charset_mode: ?[]const u8,
exit_pc_charset_mode: ?[]const u8,
enter_scancode_mode: ?[]const u8,
exit_scancode_mode: ?[]const u8,
pc_term_options: ?[]const u8,
scancode_escape: ?[]const u8,
alt_scancode_esc: ?[]const u8,
enter_horizontal_hl_mode: ?[]const u8,
enter_left_hl_mode: ?[]const u8,
enter_low_hl_mode: ?[]const u8,
enter_right_hl_mode: ?[]const u8,
enter_top_hl_mode: ?[]const u8,
enter_vertical_hl_mode: ?[]const u8,
set_a_attributes: ?[]const u8,
set_pglen_inch: ?[]const u8,
